// <auto-generated />
using System;
using FMS.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FMS.Db.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20241226201056_Mg-Admin-LabourRate")]
    partial class MgAdminLabourRate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FMS.Db.Entity.AlternateUnit", b =>
                {
                    b.Property<Guid>("AlternateUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("AlternateQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AlternateUnitName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<Guid>("FK_ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Fk_UnitId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<decimal>("UnitQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AlternateUnitId");

                    b.HasIndex("FK_ProductId");

                    b.HasIndex("Fk_UnitId");

                    b.ToTable("AlternateUnits", "public");
                });

            modelBuilder.Entity("FMS.Db.Entity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "public");

                    b.HasData(
                        new
                        {
                            Id = "438df919-342f-4ddf-87c4-6d7a16e64651",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "5c3a5755-95c7-4f51-84c7-6d7a16e64651",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "71f97dea-8c5f-4f51-84c7-6d7a16e64651",
                            Name = "Devloper",
                            NormalizedName = "DEVLOPER"
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Fk_TokenId")
                        .HasColumnType("uuid");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MaratialStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TermCondition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_TokenId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "public");

                    b.HasData(
                        new
                        {
                            Id = "4431f16a-6bc7-4e9b-bada-c491fcc81a58",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1993, 7, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            ConcurrencyStamp = "65a37859-d054-4a68-a817-1669d83c598a",
                            Email = "raypintu959@gmail.com",
                            EmailConfirmed = true,
                            Fk_TokenId = new Guid("3f7c3a85-1e6f-4c2a-8f5e-1234567890ab"),
                            Gender = "male",
                            LockoutEnabled = true,
                            MaratialStatus = "unmarred",
                            Name = "Pintu Ray",
                            NormalizedEmail = "RAYPINTU959@GMAIL.COM",
                            NormalizedUserName = "RAYPINTU959@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGCZJkRuuaN5s6jesxs7zm4NBR99KorCbeWBm6yVLgn2JCBVFEKr5ui4hLYFkhQWCA==",
                            PhoneNumber = "8249486590",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ZCKN4FWVQMFYYU3JWBLJN7UUN2CBOZMF",
                            TermCondition = true,
                            TwoFactorEnabled = true,
                            UserName = "raypintu959@gmail.com"
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.Branch", b =>
                {
                    b.Property<Guid>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BranchAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.HasKey("BranchId");

                    b.ToTable("Branches", "public");
                });

            modelBuilder.Entity("FMS.Db.Entity.BranchFinancialYear", b =>
                {
                    b.Property<Guid>("BranchFinancialYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.HasKey("BranchFinancialYearId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.ToTable("BranchFinancialYears", "public");
                });

            modelBuilder.Entity("FMS.Db.Entity.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uuid");

                    b.Property<string>("GSTIN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CompanyId");

                    b.HasIndex("Fk_BranchId");

                    b.ToTable("Company", "public");
                });

            modelBuilder.Entity("FMS.Db.Entity.FinancialYear", b =>
                {
                    b.Property<Guid>("FinancialYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Financial_Year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("FinancialYearId");

                    b.ToTable("FinancialYears", "public");
                });

            modelBuilder.Entity("FMS.Db.Entity.LabourRate", b =>
                {
                    b.Property<Guid>("LabourRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("Fk_BranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Fk_ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Fk_ProductTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<decimal>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 4)")
                        .HasDefaultValue(0m);

                    b.HasKey("LabourRateId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_ProductId");

                    b.HasIndex("Fk_ProductTypeId");

                    b.ToTable("LabourRates", "public");
                });

            modelBuilder.Entity("FMS.Db.Entity.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<Guid>("Fk_ProductGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Fk_ProductSubGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Fk_ProductTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Fk_UnitId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("GST")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("RetailPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("WholeSalePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.HasKey("ProductId");

                    b.HasIndex("Fk_ProductGroupId");

                    b.HasIndex("Fk_ProductSubGroupId");

                    b.HasIndex("Fk_ProductTypeId");

                    b.HasIndex("Fk_UnitId");

                    b.ToTable("Products", "public");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductGroup", b =>
                {
                    b.Property<Guid>("ProductGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<Guid>("Fk_ProductTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("ProductGroupName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("ProductGroupId");

                    b.HasIndex("Fk_ProductTypeId");

                    b.ToTable("ProductGroups", "public");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductSubGroup", b =>
                {
                    b.Property<Guid>("ProductSubGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<Guid>("Fk_ProductGroupId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("ProductSubGroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ProductSubGroupId");

                    b.HasIndex("Fk_ProductGroupId");

                    b.ToTable("ProductSubGroups", "public");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductType", b =>
                {
                    b.Property<Guid>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Product_Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ProductTypeId");

                    b.ToTable("ProductTypes", "public");

                    b.HasData(
                        new
                        {
                            ProductTypeId = new Guid("a4ab180b-acc7-44ce-aef7-c588d41edd5c"),
                            Product_Type = "FINISHED GOODS"
                        },
                        new
                        {
                            ProductTypeId = new Guid("b524f4a7-1bb2-4347-84ae-e0da56eb4a31"),
                            Product_Type = "RAW MATERIALS"
                        },
                        new
                        {
                            ProductTypeId = new Guid("b504237f-af5f-485a-bec9-0906c50df3c6"),
                            Product_Type = "SERVICE GOODS"
                        },
                        new
                        {
                            ProductTypeId = new Guid("66ada405-1229-45df-9598-90b602078933"),
                            Product_Type = "MOULD & MECHINARY"
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.RegisterToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("TokenValue")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("TokenId");

                    b.ToTable("RegisterTokens", "public");

                    b.HasData(
                        new
                        {
                            TokenId = new Guid("3f7c3a85-1e6f-4c2a-8f5e-1234567890ab"),
                            IsActive = true,
                            TokenValue = "123-123-1234"
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.Unit", b =>
                {
                    b.Property<Guid>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("UnitId");

                    b.ToTable("Units", "public");
                });

            modelBuilder.Entity("FMS.Db.Entity.UserBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uuid");

                    b.Property<string>("Fk_UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.HasKey("Id");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_UserId");

                    b.ToTable("UserBranches", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "public");

                    b.HasDiscriminator().HasValue("IdentityUserClaim<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "public");

                    b.HasDiscriminator().HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "public");
                });

            modelBuilder.Entity("FMS.Db.Entity.AppUserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>");

                    b.HasDiscriminator().HasValue("AppUserClaim");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Create",
                            ClaimValue = "Create",
                            UserId = "4431f16a-6bc7-4e9b-bada-c491fcc81a58"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Update",
                            ClaimValue = "Update",
                            UserId = "4431f16a-6bc7-4e9b-bada-c491fcc81a58"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Delete",
                            ClaimValue = "Delete",
                            UserId = "4431f16a-6bc7-4e9b-bada-c491fcc81a58"
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = "4431f16a-6bc7-4e9b-bada-c491fcc81a58",
                            RoleId = "71f97dea-8c5f-4f51-84c7-6d7a16e64651",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 12, 26, 20, 10, 54, 953, DateTimeKind.Utc).AddTicks(5104),
                            ModifyBy = "System",
                            ModifyDate = new DateTime(2024, 12, 26, 20, 10, 54, 953, DateTimeKind.Utc).AddTicks(6604)
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.AlternateUnit", b =>
                {
                    b.HasOne("FMS.Db.Entity.Product", "Product")
                        .WithMany("AlternateUnits")
                        .HasForeignKey("FK_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Unit", "Unit")
                        .WithMany("AlternateUnits")
                        .HasForeignKey("Fk_UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("FMS.Db.Entity.AppUser", b =>
                {
                    b.HasOne("FMS.Db.Entity.RegisterToken", "Token")
                        .WithOne("User")
                        .HasForeignKey("FMS.Db.Entity.AppUser", "Fk_TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("FMS.Db.Entity.BranchFinancialYear", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("BranchFinancialYears")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("BranchFinancialYears")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");
                });

            modelBuilder.Entity("FMS.Db.Entity.Company", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("Companies")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FMS.Db.Entity.LabourRate", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("LabourRates")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("LabourRates")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Product", "Product")
                        .WithMany("LabourRates")
                        .HasForeignKey("Fk_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.ProductType", "ProductType")
                        .WithMany("LabourRates")
                        .HasForeignKey("Fk_ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("Product");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("FMS.Db.Entity.Product", b =>
                {
                    b.HasOne("FMS.Db.Entity.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("Fk_ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.ProductSubGroup", "ProductSubGroup")
                        .WithMany("Products")
                        .HasForeignKey("Fk_ProductSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FMS.Db.Entity.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("Fk_ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("Fk_UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductGroup");

                    b.Navigation("ProductSubGroup");

                    b.Navigation("ProductType");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductGroup", b =>
                {
                    b.HasOne("FMS.Db.Entity.ProductType", "ProductType")
                        .WithMany("ProductGroups")
                        .HasForeignKey("Fk_ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductSubGroup", b =>
                {
                    b.HasOne("FMS.Db.Entity.ProductGroup", "ProductGroup")
                        .WithMany("ProductSubGroups")
                        .HasForeignKey("Fk_ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("FMS.Db.Entity.UserBranch", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("UserBranch")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.AppUser", "User")
                        .WithMany("UserBranch")
                        .HasForeignKey("Fk_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("FMS.Db.Entity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FMS.Db.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FMS.Db.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("FMS.Db.Entity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FMS.Db.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Db.Entity.AppUser", b =>
                {
                    b.Navigation("UserBranch");
                });

            modelBuilder.Entity("FMS.Db.Entity.Branch", b =>
                {
                    b.Navigation("BranchFinancialYears");

                    b.Navigation("Companies");

                    b.Navigation("LabourRates");

                    b.Navigation("UserBranch");
                });

            modelBuilder.Entity("FMS.Db.Entity.FinancialYear", b =>
                {
                    b.Navigation("BranchFinancialYears");

                    b.Navigation("LabourRates");
                });

            modelBuilder.Entity("FMS.Db.Entity.Product", b =>
                {
                    b.Navigation("AlternateUnits");

                    b.Navigation("LabourRates");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductGroup", b =>
                {
                    b.Navigation("ProductSubGroups");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductSubGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductType", b =>
                {
                    b.Navigation("LabourRates");

                    b.Navigation("ProductGroups");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FMS.Db.Entity.RegisterToken", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("FMS.Db.Entity.Unit", b =>
                {
                    b.Navigation("AlternateUnits");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
