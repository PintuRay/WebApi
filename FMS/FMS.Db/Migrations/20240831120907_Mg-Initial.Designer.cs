// <auto-generated />
using System;
using FMS.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Db.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240831120907_Mg-Initial")]
    partial class MgInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FMS.Db.Entity.AlternateUnit", b =>
                {
                    b.Property<Guid>("AlternateUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("AlternateQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AlternateUnitName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FK_ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("UnitQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AlternateUnitId");

                    b.HasIndex("FK_ProductId");

                    b.HasIndex("Fk_UnitId");

                    b.ToTable("AlternateUnits", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "dbo");

                    b.HasData(
                        new
                        {
                            Id = "438df919-342f-4ddf-87c4-6d7a16e64651",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "5c3a5755-95c7-4f51-84c7-6d7a16e64651",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "71f97dea-8c5f-4f51-84c7-6d7a16e64651",
                            Name = "Devloper",
                            NormalizedName = "DEVLOPER"
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("FkTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FkTokenId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");

                    b.HasData(
                        new
                        {
                            Id = "4431f16a-6bc7-4e9b-bada-c491fcc81a58",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65a37859-d054-4a68-a817-1669d83c598a",
                            Email = "raypintu959@gmail.com",
                            EmailConfirmed = true,
                            FkTokenId = new Guid("3f7c3a85-1e6f-4c2a-8f5e-1234567890ab"),
                            LockoutEnabled = true,
                            Name = "Pintu Ray",
                            NormalizedEmail = "RAYPINTU959@GMAIL.COM",
                            NormalizedUserName = "RAYPINTU959@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGCZJkRuuaN5s6jesxs7zm4NBR99KorCbeWBm6yVLgn2JCBVFEKr5ui4hLYFkhQWCA==",
                            PhoneNumber = "8249486590",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ZCKN4FWVQMFYYU3JWBLJN7UUN2CBOZMF",
                            TwoFactorEnabled = true,
                            UserName = "raypintu959@gmail.com"
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.Branch", b =>
                {
                    b.Property<Guid>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("BranchAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.HasKey("BranchId");

                    b.ToTable("Branches", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.BranchFinancialYear", b =>
                {
                    b.Property<Guid>("BranchFinancialYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.HasKey("BranchFinancialYearId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.ToTable("BranchFinancialYears", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.HasKey("CityId");

                    b.HasIndex("Fk_StateId");

                    b.ToTable("Cities", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GSTIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.HasIndex("Fk_BranchId");

                    b.ToTable("Company", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.DamageOrder", b =>
                {
                    b.Property<Guid>("DamageOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Fk_LabourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DamageOrderId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_LabourId");

                    b.HasIndex("Fk_ProductTypeId");

                    b.ToTable("DamageOrders", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.DamageTransaction", b =>
                {
                    b.Property<Guid>("DamageTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_DamageOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DamageTransactionId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_DamageOrderId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_ProductId");

                    b.ToTable("DamageTransactions", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.FinancialYear", b =>
                {
                    b.Property<Guid>("FinancialYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Financial_Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("FinancialYearId");

                    b.ToTable("FinancialYears", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.InwardSupplyOrder", b =>
                {
                    b.Property<Guid>("InwardSupplyOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromBranch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InwardSupplyOrderId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_ProductTypeId");

                    b.ToTable("InwardSupplyOrders", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.InwardSupplyTransaction", b =>
                {
                    b.Property<Guid>("InwardSupplyTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_InwardSupplyOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InwardSupplyTransactionId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_InwardSupplyOrderId");

                    b.HasIndex("Fk_ProductId");

                    b.ToTable("InwardSupplyTransactions", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.JournalOrder", b =>
                {
                    b.Property<Guid>("JournalOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DrCr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Narration")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("VoucherDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VouvherNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("JournalOrderId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.ToTable("JournalOrders", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.JournalTransaction", b =>
                {
                    b.Property<Guid>("JournalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DrCr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_JournalOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_LedgerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_LedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Fk_SubLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid?>("LedgerDevLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("JournalId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_JournalOrderId");

                    b.HasIndex("Fk_LedgerGroupId");

                    b.HasIndex("Fk_SubLedgerId");

                    b.HasIndex("LedgerDevLedgerId");

                    b.HasIndex("LedgerId");

                    b.ToTable("JournalTransactions", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.Labour", b =>
                {
                    b.Property<Guid>("LabourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Fk_Labour_TypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_SubLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LabourName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LabourId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_Labour_TypeId");

                    b.HasIndex("Fk_SubLedgerId");

                    b.ToTable("Labours", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.LabourOrder", b =>
                {
                    b.Property<Guid>("LabourOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FK_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_LabourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_LabourTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OTAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 4)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("TransactionDate")
                        .HasMaxLength(10)
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LabourOrderId");

                    b.HasIndex("FK_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_LabourId");

                    b.HasIndex("Fk_LabourTypeId");

                    b.HasIndex("Fk_ProductId");

                    b.ToTable("LabourOrders", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.LabourRate", b =>
                {
                    b.Property<Guid>("LabourRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 4)")
                        .HasDefaultValue(0m);

                    b.HasKey("LabourRateId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_ProductId");

                    b.HasIndex("Fk_ProductTypeId");

                    b.ToTable("LabourRates", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.LabourTransaction", b =>
                {
                    b.Property<Guid>("LabourTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_LabourOdrId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LabourTransactionId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_LabourOdrId");

                    b.HasIndex("Fk_ProductId");

                    b.ToTable("LabourTransactions", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.LabourType", b =>
                {
                    b.Property<Guid>("LabourTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Labour_Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LabourTypeId");

                    b.ToTable("LabourTypes", "dbo");

                    b.HasData(
                        new
                        {
                            LabourTypeId = new Guid("6c2758a2-79b5-43a6-8851-c6f975433b0f"),
                            Labour_Type = "SERVICE"
                        },
                        new
                        {
                            LabourTypeId = new Guid("5e514855-55a0-459c-8b8b-def7696d9ad0"),
                            Labour_Type = "PRODUCTION"
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.Ledger", b =>
                {
                    b.Property<Guid>("LedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_LedgerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Fk_LedgerSubGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HasSubLedger")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LedgerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LedgerType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.HasKey("LedgerId");

                    b.HasIndex("Fk_LedgerGroupId");

                    b.HasIndex("Fk_LedgerSubGroupId");

                    b.ToTable("Ledgers", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.LedgerBalance", b =>
                {
                    b.Property<Guid>("LedgerBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYear")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_LedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid?>("LedgerDevLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("OpeningBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("OpeningBalanceType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("RunningBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("RunningBalanceType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("LedgerBalanceId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYear");

                    b.HasIndex("LedgerDevLedgerId");

                    b.HasIndex("LedgerId");

                    b.ToTable("LedgerBalances", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.LedgerDev", b =>
                {
                    b.Property<Guid>("LedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("Fk_LedgerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Fk_LedgerSubGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HasSubLedger")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LedgerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LedgerType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("LedgerId");

                    b.HasIndex("Fk_LedgerGroupId");

                    b.HasIndex("Fk_LedgerSubGroupId");

                    b.ToTable("ledgersDev", "dbo");

                    b.HasData(
                        new
                        {
                            LedgerId = new Guid("d982b189-3326-430d-acde-13c12bba7992"),
                            Fk_LedgerGroupId = new Guid("aca9caf1-ea9b-4602-bb60-6c354eac5ce6"),
                            HasSubLedger = "Yes",
                            LedgerName = "Sundry Creditors",
                            LedgerType = "None"
                        },
                        new
                        {
                            LedgerId = new Guid("fbf4a6c7-c33d-4ad0-b7a5-abb319cc1b93"),
                            Fk_LedgerGroupId = new Guid("2fc89e45-7365-46b7-933c-9abae2e5967a"),
                            HasSubLedger = "Yes",
                            LedgerName = "Sundry Debtors",
                            LedgerType = "None"
                        },
                        new
                        {
                            LedgerId = new Guid("f07a3165-d63b-4dae-a820-ec79d83363b1"),
                            Fk_LedgerGroupId = new Guid("01548ef6-3fe2-4c0f-9a5f-ceed35066136"),
                            HasSubLedger = "Yes",
                            LedgerName = "Labour A/c",
                            LedgerType = "None"
                        },
                        new
                        {
                            LedgerId = new Guid("1ecff7d8-702b-4dcd-93c5-b95a67e36fc9"),
                            Fk_LedgerGroupId = new Guid("15fe2512-d922-45c5-9e03-64c32b903a5b"),
                            HasSubLedger = "No",
                            LedgerName = "Sales A/c",
                            LedgerType = "None"
                        },
                        new
                        {
                            LedgerId = new Guid("75e1fe3d-047d-41ad-a138-f0bb5bbc8b1f"),
                            Fk_LedgerGroupId = new Guid("4458bce5-4546-4120-a7de-03acefd07b85"),
                            HasSubLedger = "No",
                            LedgerName = "Purchase A/c",
                            LedgerType = "None"
                        },
                        new
                        {
                            LedgerId = new Guid("80025398-c02f-4a1a-9db7-8a21f9efd9ef"),
                            Fk_LedgerGroupId = new Guid("15fe2512-d922-45c5-9e03-64c32b903a5b"),
                            HasSubLedger = "No",
                            LedgerName = "Sales Return A/c",
                            LedgerType = "None"
                        },
                        new
                        {
                            LedgerId = new Guid("712d600b-dfd6-4704-9e32-317fe62499a9"),
                            Fk_LedgerGroupId = new Guid("4458bce5-4546-4120-a7de-03acefd07b85"),
                            HasSubLedger = "No",
                            LedgerName = "Purchase Return A/c",
                            LedgerType = "None"
                        },
                        new
                        {
                            LedgerId = new Guid("701c663e-dac3-4a39-8d2a-36eb68426b54"),
                            Fk_LedgerGroupId = new Guid("f3eef2dd-09bb-4e21-b036-1e5bba920efe"),
                            HasSubLedger = "No",
                            LedgerName = "Cash A/c",
                            LedgerType = "None"
                        },
                        new
                        {
                            LedgerId = new Guid("9bfa6931-977f-4a3d-a582-da5f1f4ab773"),
                            Fk_LedgerGroupId = new Guid("f3eef2dd-09bb-4e21-b036-1e5bba920efe"),
                            HasSubLedger = "No",
                            LedgerName = "Bank A/c",
                            LedgerType = "None"
                        },
                        new
                        {
                            LedgerId = new Guid("7f740148-ed36-48ad-b194-031bc717842c"),
                            Fk_LedgerGroupId = new Guid("01548ef6-3fe2-4c0f-9a5f-ceed35066136"),
                            HasSubLedger = "No",
                            LedgerName = "Labour Charges",
                            LedgerType = "None"
                        },
                        new
                        {
                            LedgerId = new Guid("9efd7830-125a-40e3-8f44-68ab03f52591"),
                            Fk_LedgerGroupId = new Guid("15fe2512-d922-45c5-9e03-64c32b903a5b"),
                            HasSubLedger = "No",
                            LedgerName = "Transporting Charges Recive",
                            LedgerType = "None"
                        },
                        new
                        {
                            LedgerId = new Guid("d281cbfb-3cac-4c6a-8ce1-7b51973b8ca4"),
                            Fk_LedgerGroupId = new Guid("4458bce5-4546-4120-a7de-03acefd07b85"),
                            HasSubLedger = "No",
                            LedgerName = "Transporting Charges Payment",
                            LedgerType = "None"
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.LedgerGroup", b =>
                {
                    b.Property<Guid>("LedgerGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("GroupAlias")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LedgerGroupId");

                    b.ToTable("LedgerGroups", "dbo");

                    b.HasData(
                        new
                        {
                            LedgerGroupId = new Guid("4458bce5-4546-4120-a7de-03acefd07b85"),
                            GroupAlias = "PLTR-DR",
                            GroupName = "Purchase"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("39b5514a-9359-46f3-8c3e-0eabd6880cf6"),
                            GroupAlias = "LB",
                            GroupName = "Unsecured Loan"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("c3c725d0-a502-4275-b0f9-1585ab6edcc7"),
                            GroupAlias = "PL-DR",
                            GroupName = "Depreciation"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("f3eef2dd-09bb-4e21-b036-1e5bba920efe"),
                            GroupAlias = "AS",
                            GroupName = "Cash & Bank Balance"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("58639324-2180-4e0b-932d-33024aa3fc5f"),
                            GroupAlias = "PL-DR",
                            GroupName = "Indirect Expenses"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("23d58228-db08-4c3d-9177-343b1cfdcf7a"),
                            GroupAlias = "LB",
                            GroupName = "Liability for Expenses"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("4d80e68f-ff00-486a-945a-3941761441d9"),
                            GroupAlias = "AS",
                            GroupName = "Fixed Assets"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("ea3f21ad-b0d4-4c27-9f9d-3c36a7a585c2"),
                            GroupAlias = "PLTR-CR",
                            GroupName = "Direct Income"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("15fe2512-d922-45c5-9e03-64c32b903a5b"),
                            GroupAlias = "PLTR-CR",
                            GroupName = "Sales"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("aca9caf1-ea9b-4602-bb60-6c354eac5ce6"),
                            GroupAlias = "LB",
                            GroupName = "Current liabilities & Provisions"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("9bbc2c1f-ffa4-44b8-9916-6edf0a47d8db"),
                            GroupAlias = "PL-DR",
                            GroupName = "Capital A/c"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("bdcf2ee2-8aab-44f6-bd1e-77b53074389a"),
                            GroupAlias = "PLTR-DR",
                            GroupName = "Opening Stock"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("2fc89e45-7365-46b7-933c-9abae2e5967a"),
                            GroupAlias = "AS",
                            GroupName = "Current Assets"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("68eeffe7-02f7-4ffc-81b3-aeb0cadc764b"),
                            GroupAlias = "LB",
                            GroupName = "Duties & Taxes"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("345b0d2a-8fca-414f-a6f2-c5f7fd9246ac"),
                            GroupAlias = "PL-CR",
                            GroupName = "Indirect Income"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("01548ef6-3fe2-4c0f-9a5f-ceed35066136"),
                            GroupAlias = "PLTR-DR",
                            GroupName = "Direct Expenses"
                        },
                        new
                        {
                            LedgerGroupId = new Guid("84a336c6-e48a-43e8-984e-f45b0bf2984f"),
                            GroupAlias = "LB",
                            GroupName = "Secured Loan"
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.LedgerSubGroup", b =>
                {
                    b.Property<Guid>("LedgerSubGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_LedgerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubGroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LedgerSubGroupId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_LedgerGroupId");

                    b.ToTable("LedgerSubGroups", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.LedgerSubGroupDev", b =>
                {
                    b.Property<Guid>("LedgerSubGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_LedgerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubGroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LedgerSubGroupId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_LedgerGroupId");

                    b.ToTable("LedgerSubGroupDevs", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.OutwardSupplyOrder", b =>
                {
                    b.Property<Guid>("OutwardSupplyOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ToBranch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OutwardSupplyOrderId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_ProductTypeId");

                    b.ToTable("OutwardSupplyOrders", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.OutwardSupplyTransaction", b =>
                {
                    b.Property<Guid>("OutwardSupplyTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_OutwardSupplyOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OutwardSupplyTransactionId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_OutwardSupplyOrderId");

                    b.HasIndex("Fk_ProductId");

                    b.ToTable("OutwardSupplyTransactions", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.Party", b =>
                {
                    b.Property<Guid>("PartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("Fk_CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_PartyType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_SubledgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GstNo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid?>("LedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PartyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PartyId");

                    b.HasIndex("Fk_CityId");

                    b.HasIndex("Fk_PartyType");

                    b.HasIndex("Fk_StateId");

                    b.HasIndex("Fk_SubledgerId");

                    b.HasIndex("LedgerId");

                    b.ToTable("Parties", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.PaymentOrder", b =>
                {
                    b.Property<Guid>("PaymentOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CashBank")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("CashBankLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ChequeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ChequeNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DrCr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Narration")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("VoucherDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VouvherNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PaymentOrderId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.ToTable("PaymentOrders", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.PaymentTransaction", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DrCr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_LedgerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_LedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_PaymentOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Fk_SubLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid?>("LedgerDevLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.HasKey("PaymentId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_LedgerGroupId");

                    b.HasIndex("Fk_PaymentOrderId");

                    b.HasIndex("Fk_SubLedgerId");

                    b.HasIndex("LedgerDevLedgerId");

                    b.HasIndex("LedgerId");

                    b.ToTable("PaymentTransaction", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_ProductGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Fk_ProductSubGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("GST")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("RetailPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("WholeSalePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.HasKey("ProductId");

                    b.HasIndex("Fk_ProductGroupId");

                    b.HasIndex("Fk_ProductSubGroupId");

                    b.HasIndex("Fk_ProductTypeId");

                    b.HasIndex("Fk_UnitId");

                    b.ToTable("Products", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductGroup", b =>
                {
                    b.Property<Guid>("ProductGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProductGroupName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ProductGroupId");

                    b.HasIndex("Fk_ProductTypeId");

                    b.ToTable("ProductGroups", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductSubGroup", b =>
                {
                    b.Property<Guid>("ProductSubGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_ProductGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProductSubGroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ProductSubGroupId");

                    b.HasIndex("Fk_ProductGroupId");

                    b.ToTable("ProductSubGroups", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductType", b =>
                {
                    b.Property<Guid>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Product_Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ProductTypeId");

                    b.ToTable("ProductTypes", "dbo");

                    b.HasData(
                        new
                        {
                            ProductTypeId = new Guid("a4ab180b-acc7-44ce-aef7-c588d41edd5c"),
                            Product_Type = "FINISHED GOODS"
                        },
                        new
                        {
                            ProductTypeId = new Guid("b524f4a7-1bb2-4347-84ae-e0da56eb4a31"),
                            Product_Type = "RAW MATERIALS"
                        },
                        new
                        {
                            ProductTypeId = new Guid("b504237f-af5f-485a-bec9-0906c50df3c6"),
                            Product_Type = "SERVICE GOODS"
                        },
                        new
                        {
                            ProductTypeId = new Guid("66ada405-1229-45df-9598-90b602078933"),
                            Product_Type = "MOULD & MECHINARY"
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductionOrder", b =>
                {
                    b.Property<Guid>("ProductionOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_FinishedGoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.HasKey("ProductionOrderId");

                    b.ToTable("ProductionOrders", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductionTransaction", b =>
                {
                    b.Property<Guid>("ProductionTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_ProductionOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_RawMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProductionTransactionId");

                    b.HasIndex("Fk_ProductionOrderId");

                    b.ToTable("ProductionTransactions", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.PurchaseOrder", b =>
                {
                    b.Property<Guid>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_SubLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Gst")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Narration")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReceivingPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("TransportationCharges")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("TranspoterName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VehicleNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_ProductTypeId");

                    b.HasIndex("Fk_SubLedgerId");

                    b.ToTable("PurchaseOrders", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.PurchaseReturnOrder", b =>
                {
                    b.Property<Guid>("PurchaseReturnOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_SubLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("GrandTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Gst")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Narration")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReceivingPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TransportationCharges")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("TranspoterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VehicleNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PurchaseReturnOrderId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_ProductTypeId");

                    b.HasIndex("Fk_SubLedgerId");

                    b.ToTable("PurchaseReturnOrders", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.PurchaseReturnTransaction", b =>
                {
                    b.Property<Guid>("PurchaseReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("AlternateQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 5)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("Fk_AlternateUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_PurchaseReturnOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Gst")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("GstAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("UnitQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 5)")
                        .HasDefaultValue(0m);

                    b.HasKey("PurchaseReturnId");

                    b.HasIndex("Fk_AlternateUnitId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_ProductId");

                    b.HasIndex("Fk_PurchaseReturnOrderId");

                    b.ToTable("PurchaseReturnTransactions", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.PurchaseTransaction", b =>
                {
                    b.Property<Guid>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal>("AlternateQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("Fk_AlternateUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Gst")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GstAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitQuantity")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("PurchaseId");

                    b.HasIndex("Fk_AlternateUnitId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_ProductId");

                    b.HasIndex("Fk_PurchaseOrderId");

                    b.ToTable("PurchaseTransactions", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.ReceiptOrder", b =>
                {
                    b.Property<Guid>("ReceiptOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CashBank")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("CashBankLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ChequeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ChequeNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DrCr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Narration")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("VoucherDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VouvherNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ReceiptOrderId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.ToTable("ReceiptOrders", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.ReceiptTransaction", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DrCr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_LedgerGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_LedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ReceiptOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Fk_SubLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid?>("LedgerDevLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.HasKey("ReceiptId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_LedgerGroupId");

                    b.HasIndex("Fk_ReceiptOrderId");

                    b.HasIndex("Fk_SubLedgerId");

                    b.HasIndex("LedgerDevLedgerId");

                    b.HasIndex("LedgerId");

                    b.ToTable("ReceiptTransactions", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.RegisterToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TokenValue")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("TokenId");

                    b.ToTable("RegisterTokens", "dbo");

                    b.HasData(
                        new
                        {
                            TokenId = new Guid("3f7c3a85-1e6f-4c2a-8f5e-1234567890ab"),
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 8, 31, 12, 9, 4, 328, DateTimeKind.Utc).AddTicks(126),
                            IsActive = true,
                            ModifyBy = "System",
                            ModifyDate = new DateTime(2024, 8, 31, 12, 9, 4, 328, DateTimeKind.Utc).AddTicks(133),
                            TokenValue = "123-123-1234"
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.SalesOrder", b =>
                {
                    b.Property<Guid>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Fk_SubLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Gst")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Narration")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PriceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceivingPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TranspoterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VehicleNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SalesOrderId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_SubLedgerId");

                    b.ToTable("SalesOrders", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.SalesOrderSetup", b =>
                {
                    b.Property<Guid>("SalesOrderSetupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_FinishedGoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.HasKey("SalesOrderSetupId");

                    b.ToTable("SalesOrderSetups", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.SalesReturnOrder", b =>
                {
                    b.Property<Guid>("SalesReturnOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Fk_SubLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("GrandTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Gst")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Narration")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PriceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceivingPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranspoterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VehicleNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SalesReturnOrderId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_SubLedgerId");

                    b.ToTable("SalesReturnOrders", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.SalesReturnTransaction", b =>
                {
                    b.Property<Guid>("SalesReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_SalesReturnOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Gst")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GstAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("SalesReturnId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_ProductId");

                    b.HasIndex("Fk_SalesReturnOrderId");

                    b.ToTable("SalesReturnTransactions", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.SalesTransaction", b =>
                {
                    b.Property<Guid>("SalesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_SalesOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Gst")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GstAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_ProductId");

                    b.HasIndex("Fk_SalesOrderId");

                    b.ToTable("SalesTransaction", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.SalesTransactionSetup", b =>
                {
                    b.Property<Guid>("SalesTransactionSetupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_SalesOrderSetupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_SubFinishedGoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SalesTransactionSetupId");

                    b.HasIndex("Fk_SalesOrderSetupId");

                    b.ToTable("SalesTransactionSetups", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.State", b =>
                {
                    b.Property<Guid>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StateId");

                    b.ToTable("States", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.Stock", b =>
                {
                    b.Property<Guid>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("AvilableStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYear")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("MaxQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 5)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("MinQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 5)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("OpeningStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.HasKey("StockId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYear");

                    b.HasIndex("Fk_ProductId");

                    b.ToTable("Stocks", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.SubLedger", b =>
                {
                    b.Property<Guid>("SubLedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_LedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid?>("LedgerDevLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SubLedgerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SubLedgerId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("LedgerDevLedgerId");

                    b.HasIndex("LedgerId");

                    b.ToTable("SubLedgers", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.SubLedgerBalance", b =>
                {
                    b.Property<Guid>("SubLedgerBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_FinancialYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_LedgerBalanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_SubLedgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("OpeningBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("OpeningBalanceType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("RunningBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("RunningBalanceType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("SubLedgerBalanceId");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_FinancialYearId");

                    b.HasIndex("Fk_LedgerBalanceId");

                    b.HasIndex("Fk_SubLedgerId");

                    b.ToTable("SubLedgerBalances", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.Unit", b =>
                {
                    b.Property<Guid>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("UnitId");

                    b.ToTable("Units", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.UserBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Fk_BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Fk_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Fk_BranchId");

                    b.HasIndex("Fk_UserId");

                    b.ToTable("UserBranches", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "dbo");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "dbo");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "dbo");
                });

            modelBuilder.Entity("FMS.Db.Entity.AppUserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>");

                    b.HasDiscriminator().HasValue("AppUserClaim");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Create",
                            ClaimValue = "Create",
                            UserId = "4431f16a-6bc7-4e9b-bada-c491fcc81a58"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Update",
                            ClaimValue = "Update",
                            UserId = "4431f16a-6bc7-4e9b-bada-c491fcc81a58"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Delete",
                            ClaimValue = "Delete",
                            UserId = "4431f16a-6bc7-4e9b-bada-c491fcc81a58"
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = "4431f16a-6bc7-4e9b-bada-c491fcc81a58",
                            RoleId = "71f97dea-8c5f-4f51-84c7-6d7a16e64651",
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2024, 8, 31, 12, 9, 4, 329, DateTimeKind.Utc).AddTicks(2044),
                            ModifyBy = "System",
                            ModifyDate = new DateTime(2024, 8, 31, 12, 9, 4, 329, DateTimeKind.Utc).AddTicks(2049)
                        });
                });

            modelBuilder.Entity("FMS.Db.Entity.AlternateUnit", b =>
                {
                    b.HasOne("FMS.Db.Entity.Product", "Product")
                        .WithMany("AlternateUnits")
                        .HasForeignKey("FK_ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Unit", "Unit")
                        .WithMany("AlternateUnits")
                        .HasForeignKey("Fk_UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("FMS.Db.Entity.AppUser", b =>
                {
                    b.HasOne("FMS.Db.Entity.RegisterToken", "Token")
                        .WithOne("User")
                        .HasForeignKey("FMS.Db.Entity.AppUser", "FkTokenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("FMS.Db.Entity.BranchFinancialYear", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("BranchFinancialYears")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("BranchFinancialYears")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");
                });

            modelBuilder.Entity("FMS.Db.Entity.City", b =>
                {
                    b.HasOne("FMS.Db.Entity.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("Fk_StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("FMS.Db.Entity.Company", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("Companies")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("FMS.Db.Entity.DamageOrder", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("DamageOrders")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("DamageOrders")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Labour", "Labour")
                        .WithMany("DamageOrders")
                        .HasForeignKey("Fk_LabourId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FMS.Db.Entity.ProductType", "ProductType")
                        .WithMany("DamageOrders")
                        .HasForeignKey("Fk_ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("Labour");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("FMS.Db.Entity.DamageTransaction", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("DamageTransactions")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.DamageOrder", "DamageOrder")
                        .WithMany("DamageTransactions")
                        .HasForeignKey("Fk_DamageOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("DamageTransactions")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Product", "Product")
                        .WithMany("DamageTransactions")
                        .HasForeignKey("Fk_ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("DamageOrder");

                    b.Navigation("FinancialYear");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FMS.Db.Entity.InwardSupplyOrder", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("InwardSupplyOrders")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("InwardSupplyOrders")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.ProductType", "ProductType")
                        .WithMany("InwardSupplyOrders")
                        .HasForeignKey("Fk_ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("FMS.Db.Entity.InwardSupplyTransaction", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("InwardSupplyTransactions")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("InwardSupplyTransactions")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.InwardSupplyOrder", "InwardSupplyOrder")
                        .WithMany("InwardSupplyTransactions")
                        .HasForeignKey("Fk_InwardSupplyOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Product", "Product")
                        .WithMany("InwardSupplyTransactions")
                        .HasForeignKey("Fk_ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("InwardSupplyOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FMS.Db.Entity.JournalOrder", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("JournalOrders")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("JournalOrders")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");
                });

            modelBuilder.Entity("FMS.Db.Entity.JournalTransaction", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("JournalTransactions")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("JournalTransactions")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.JournalOrder", "JournalOrder")
                        .WithMany("JournalTransactions")
                        .HasForeignKey("Fk_JournalOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.LedgerGroup", "LedgerGroup")
                        .WithMany("JournalTransactions")
                        .HasForeignKey("Fk_LedgerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.SubLedger", "SubLedger")
                        .WithMany("JournalTransactions")
                        .HasForeignKey("Fk_SubLedgerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FMS.Db.Entity.LedgerDev", "LedgerDev")
                        .WithMany("Journals")
                        .HasForeignKey("LedgerDevLedgerId");

                    b.HasOne("FMS.Db.Entity.Ledger", "Ledger")
                        .WithMany("Journals")
                        .HasForeignKey("LedgerId");

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("JournalOrder");

                    b.Navigation("Ledger");

                    b.Navigation("LedgerDev");

                    b.Navigation("LedgerGroup");

                    b.Navigation("SubLedger");
                });

            modelBuilder.Entity("FMS.Db.Entity.Labour", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("Labours")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FMS.Db.Entity.LabourType", "LabourType")
                        .WithMany("Labours")
                        .HasForeignKey("Fk_Labour_TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.SubLedger", "SubLedger")
                        .WithMany("Labours")
                        .HasForeignKey("Fk_SubLedgerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("LabourType");

                    b.Navigation("SubLedger");
                });

            modelBuilder.Entity("FMS.Db.Entity.LabourOrder", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("LabourOrders")
                        .HasForeignKey("FK_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("LabourOrders")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Labour", "Labour")
                        .WithMany("LabourOrders")
                        .HasForeignKey("Fk_LabourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.LabourType", "LabourType")
                        .WithMany("LabourOrders")
                        .HasForeignKey("Fk_LabourTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Product", "Product")
                        .WithMany("LabourOrders")
                        .HasForeignKey("Fk_ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("Labour");

                    b.Navigation("LabourType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FMS.Db.Entity.LabourRate", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("LabourRates")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("LabourRates")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Product", "Product")
                        .WithMany("LabourRates")
                        .HasForeignKey("Fk_ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.ProductType", "ProductType")
                        .WithMany("LabourRates")
                        .HasForeignKey("Fk_ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("Product");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("FMS.Db.Entity.LabourTransaction", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("LabourTransactions")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("LabourTransactions")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.LabourOrder", "LabourOrder")
                        .WithMany("LabourTransactions")
                        .HasForeignKey("Fk_LabourOdrId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Product", "Product")
                        .WithMany("LabourTransactions")
                        .HasForeignKey("Fk_ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("LabourOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FMS.Db.Entity.Ledger", b =>
                {
                    b.HasOne("FMS.Db.Entity.LedgerGroup", "LedgerGroup")
                        .WithMany("Ledgers")
                        .HasForeignKey("Fk_LedgerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.LedgerSubGroup", "LedgerSubGroup")
                        .WithMany("Ledgers")
                        .HasForeignKey("Fk_LedgerSubGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LedgerGroup");

                    b.Navigation("LedgerSubGroup");
                });

            modelBuilder.Entity("FMS.Db.Entity.LedgerBalance", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("LedgerBalances")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("LedgerBalances")
                        .HasForeignKey("Fk_FinancialYear")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.LedgerDev", "LedgerDev")
                        .WithMany("LedgerBalances")
                        .HasForeignKey("LedgerDevLedgerId");

                    b.HasOne("FMS.Db.Entity.Ledger", "Ledger")
                        .WithMany("LedgerBalances")
                        .HasForeignKey("LedgerId");

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("Ledger");

                    b.Navigation("LedgerDev");
                });

            modelBuilder.Entity("FMS.Db.Entity.LedgerDev", b =>
                {
                    b.HasOne("FMS.Db.Entity.LedgerGroup", "LedgerGroup")
                        .WithMany("LedgersDev")
                        .HasForeignKey("Fk_LedgerGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.LedgerSubGroupDev", "LedgerSubGroup")
                        .WithMany("LedgersDev")
                        .HasForeignKey("Fk_LedgerSubGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("LedgerGroup");

                    b.Navigation("LedgerSubGroup");
                });

            modelBuilder.Entity("FMS.Db.Entity.LedgerSubGroup", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("LedgerSubGroup")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.LedgerGroup", "LedgerGroup")
                        .WithMany("LedgerSubGroups")
                        .HasForeignKey("Fk_LedgerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("LedgerGroup");
                });

            modelBuilder.Entity("FMS.Db.Entity.LedgerSubGroupDev", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("LedgerSubGroupDev")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.LedgerGroup", "LedgerGroup")
                        .WithMany("LedgerSubGroupsDev")
                        .HasForeignKey("Fk_LedgerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("LedgerGroup");
                });

            modelBuilder.Entity("FMS.Db.Entity.OutwardSupplyOrder", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("OutwardSupplyOrders")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("OutwardSupplyOrders")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.ProductType", "ProductType")
                        .WithMany("OutwardSupplyOrders")
                        .HasForeignKey("Fk_ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("FMS.Db.Entity.OutwardSupplyTransaction", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("OutwardSupplyTransactions")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("OutwardSupplyTransactions")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.OutwardSupplyOrder", "OutwardSupplyOrder")
                        .WithMany("OutwardSupplyTransactions")
                        .HasForeignKey("Fk_OutwardSupplyOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Product", "Product")
                        .WithMany("OutwardSupplyTransactions")
                        .HasForeignKey("Fk_ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("OutwardSupplyOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FMS.Db.Entity.Party", b =>
                {
                    b.HasOne("FMS.Db.Entity.City", "City")
                        .WithMany("Parties")
                        .HasForeignKey("Fk_CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.LedgerDev", "LedgerDev")
                        .WithMany("Parties")
                        .HasForeignKey("Fk_PartyType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.State", "State")
                        .WithMany("Parties")
                        .HasForeignKey("Fk_StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.SubLedger", "SubLedger")
                        .WithMany("Parties")
                        .HasForeignKey("Fk_SubledgerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Ledger", null)
                        .WithMany("Parties")
                        .HasForeignKey("LedgerId");

                    b.Navigation("City");

                    b.Navigation("LedgerDev");

                    b.Navigation("State");

                    b.Navigation("SubLedger");
                });

            modelBuilder.Entity("FMS.Db.Entity.PaymentOrder", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("PaymentOrders")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("PaymentOrders")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");
                });

            modelBuilder.Entity("FMS.Db.Entity.PaymentTransaction", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.LedgerGroup", "LedgerGroup")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("Fk_LedgerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.PaymentOrder", "PaymentOrder")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("Fk_PaymentOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.SubLedger", "SubLedger")
                        .WithMany("PaymentTransaction")
                        .HasForeignKey("Fk_SubLedgerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FMS.Db.Entity.LedgerDev", "LedgerDev")
                        .WithMany("Payments")
                        .HasForeignKey("LedgerDevLedgerId");

                    b.HasOne("FMS.Db.Entity.Ledger", "Ledger")
                        .WithMany("Payments")
                        .HasForeignKey("LedgerId");

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("Ledger");

                    b.Navigation("LedgerDev");

                    b.Navigation("LedgerGroup");

                    b.Navigation("PaymentOrder");

                    b.Navigation("SubLedger");
                });

            modelBuilder.Entity("FMS.Db.Entity.Product", b =>
                {
                    b.HasOne("FMS.Db.Entity.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("Fk_ProductGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.ProductSubGroup", "ProductSubGroup")
                        .WithMany("Products")
                        .HasForeignKey("Fk_ProductSubGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FMS.Db.Entity.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("Fk_ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("Fk_UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductGroup");

                    b.Navigation("ProductSubGroup");

                    b.Navigation("ProductType");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductGroup", b =>
                {
                    b.HasOne("FMS.Db.Entity.ProductType", "ProductType")
                        .WithMany("ProductGroups")
                        .HasForeignKey("Fk_ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductSubGroup", b =>
                {
                    b.HasOne("FMS.Db.Entity.ProductGroup", "ProductGroup")
                        .WithMany("ProductSubGroups")
                        .HasForeignKey("Fk_ProductGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductionTransaction", b =>
                {
                    b.HasOne("FMS.Db.Entity.ProductionOrder", "ProductionOrder")
                        .WithMany("ProductionTransactions")
                        .HasForeignKey("Fk_ProductionOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("FMS.Db.Entity.PurchaseOrder", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.ProductType", "ProductType")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("Fk_ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.SubLedger", "SubLedger")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("Fk_SubLedgerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("ProductType");

                    b.Navigation("SubLedger");
                });

            modelBuilder.Entity("FMS.Db.Entity.PurchaseReturnOrder", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("PurchaseReturnOrders")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("PurchaseReturnOrders")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.ProductType", "ProductType")
                        .WithMany("PurchaseReturnOrders")
                        .HasForeignKey("Fk_ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.SubLedger", "SubLedger")
                        .WithMany("PurchaseReturnOrders")
                        .HasForeignKey("Fk_SubLedgerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("ProductType");

                    b.Navigation("SubLedger");
                });

            modelBuilder.Entity("FMS.Db.Entity.PurchaseReturnTransaction", b =>
                {
                    b.HasOne("FMS.Db.Entity.AlternateUnit", "AlternateUnit")
                        .WithMany("PurchaseReturnTransactions")
                        .HasForeignKey("Fk_AlternateUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("PurchaseReturnTransactions")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("PurchaseReturnTransactions")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Product", "Product")
                        .WithMany("PurchaseReturnTransactions")
                        .HasForeignKey("Fk_ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.PurchaseReturnOrder", "PurchaseReturnOrder")
                        .WithMany("PurchaseReturnTransactions")
                        .HasForeignKey("Fk_PurchaseReturnOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlternateUnit");

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("Product");

                    b.Navigation("PurchaseReturnOrder");
                });

            modelBuilder.Entity("FMS.Db.Entity.PurchaseTransaction", b =>
                {
                    b.HasOne("FMS.Db.Entity.AlternateUnit", "AlternateUnit")
                        .WithMany("PurchaseTransactions")
                        .HasForeignKey("Fk_AlternateUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("PurchaseTransactions")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("PurchaseTransactions")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Product", "Product")
                        .WithMany("PurchaseTransactions")
                        .HasForeignKey("Fk_ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseTransactions")
                        .HasForeignKey("Fk_PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlternateUnit");

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("FMS.Db.Entity.ReceiptOrder", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("ReceiptOrders")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("ReceiptOrders")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");
                });

            modelBuilder.Entity("FMS.Db.Entity.ReceiptTransaction", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("ReceiptTransactions")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("ReceiptTransactions")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.LedgerGroup", "LedgerGroup")
                        .WithMany("ReceiptTransactions")
                        .HasForeignKey("Fk_LedgerGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.ReceiptOrder", "ReceiptOrder")
                        .WithMany("ReceiptTransactions")
                        .HasForeignKey("Fk_ReceiptOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.SubLedger", "SubLedger")
                        .WithMany("ReceiptTransactions")
                        .HasForeignKey("Fk_SubLedgerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FMS.Db.Entity.LedgerDev", "LedgerDev")
                        .WithMany("Receipts")
                        .HasForeignKey("LedgerDevLedgerId");

                    b.HasOne("FMS.Db.Entity.Ledger", "Ledger")
                        .WithMany("Receipts")
                        .HasForeignKey("LedgerId");

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("Ledger");

                    b.Navigation("LedgerDev");

                    b.Navigation("LedgerGroup");

                    b.Navigation("ReceiptOrder");

                    b.Navigation("SubLedger");
                });

            modelBuilder.Entity("FMS.Db.Entity.SalesOrder", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("SalesOrders")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("SalesOrders")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.SubLedger", "SubLedger")
                        .WithMany("SalesOrders")
                        .HasForeignKey("Fk_SubLedgerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("SubLedger");
                });

            modelBuilder.Entity("FMS.Db.Entity.SalesReturnOrder", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("SalesReturnOrders")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("SalesReturnOrders")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.SubLedger", "SubLedger")
                        .WithMany("SalesReturnOrders")
                        .HasForeignKey("Fk_SubLedgerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("SubLedger");
                });

            modelBuilder.Entity("FMS.Db.Entity.SalesReturnTransaction", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("SalesReturnTransactions")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("SalesReturnTransactions")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Product", "Product")
                        .WithMany("SalesReturnTransactions")
                        .HasForeignKey("Fk_ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.SalesReturnOrder", "SalesReturnOrder")
                        .WithMany("SalesReturnTransactions")
                        .HasForeignKey("Fk_SalesReturnOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("Product");

                    b.Navigation("SalesReturnOrder");
                });

            modelBuilder.Entity("FMS.Db.Entity.SalesTransaction", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("SalesTransactions")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("SalesTransactions")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Product", "Product")
                        .WithMany("SalesTransactions")
                        .HasForeignKey("Fk_ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.SalesOrder", "SalesOrder")
                        .WithMany("SalesTransactions")
                        .HasForeignKey("Fk_SalesOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("FMS.Db.Entity.SalesTransactionSetup", b =>
                {
                    b.HasOne("FMS.Db.Entity.SalesOrderSetup", "SalesOrderSetup")
                        .WithMany("SalesTransactionSetups")
                        .HasForeignKey("Fk_SalesOrderSetupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SalesOrderSetup");
                });

            modelBuilder.Entity("FMS.Db.Entity.Stock", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("Stocks")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("Stocks")
                        .HasForeignKey("Fk_FinancialYear")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("Fk_ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FMS.Db.Entity.SubLedger", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("SubLedgers")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FMS.Db.Entity.LedgerDev", "LedgerDev")
                        .WithMany("SubLedgers")
                        .HasForeignKey("LedgerDevLedgerId");

                    b.HasOne("FMS.Db.Entity.Ledger", "Ledger")
                        .WithMany("SubLedgers")
                        .HasForeignKey("LedgerId");

                    b.Navigation("Branch");

                    b.Navigation("Ledger");

                    b.Navigation("LedgerDev");
                });

            modelBuilder.Entity("FMS.Db.Entity.SubLedgerBalance", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("SubLedgerBalances")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.FinancialYear", "FinancialYear")
                        .WithMany("SubLedgerBalances")
                        .HasForeignKey("Fk_FinancialYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.LedgerBalance", "LedgerBalance")
                        .WithMany("SubLedgerBalances")
                        .HasForeignKey("Fk_LedgerBalanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.SubLedger", "SubLedger")
                        .WithMany("SubLedgerBalances")
                        .HasForeignKey("Fk_SubLedgerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("FinancialYear");

                    b.Navigation("LedgerBalance");

                    b.Navigation("SubLedger");
                });

            modelBuilder.Entity("FMS.Db.Entity.UserBranch", b =>
                {
                    b.HasOne("FMS.Db.Entity.Branch", "Branch")
                        .WithMany("UserBranch")
                        .HasForeignKey("Fk_BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.AppUser", "User")
                        .WithMany("UserBranch")
                        .HasForeignKey("Fk_UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("FMS.Db.Entity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FMS.Db.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FMS.Db.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("FMS.Db.Entity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FMS.Db.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FMS.Db.Entity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FMS.Db.Entity.AlternateUnit", b =>
                {
                    b.Navigation("PurchaseReturnTransactions");

                    b.Navigation("PurchaseTransactions");
                });

            modelBuilder.Entity("FMS.Db.Entity.AppUser", b =>
                {
                    b.Navigation("UserBranch");
                });

            modelBuilder.Entity("FMS.Db.Entity.Branch", b =>
                {
                    b.Navigation("BranchFinancialYears");

                    b.Navigation("Companies");

                    b.Navigation("DamageOrders");

                    b.Navigation("DamageTransactions");

                    b.Navigation("InwardSupplyOrders");

                    b.Navigation("InwardSupplyTransactions");

                    b.Navigation("JournalOrders");

                    b.Navigation("JournalTransactions");

                    b.Navigation("LabourOrders");

                    b.Navigation("LabourRates");

                    b.Navigation("LabourTransactions");

                    b.Navigation("Labours");

                    b.Navigation("LedgerBalances");

                    b.Navigation("LedgerSubGroup");

                    b.Navigation("LedgerSubGroupDev");

                    b.Navigation("OutwardSupplyOrders");

                    b.Navigation("OutwardSupplyTransactions");

                    b.Navigation("PaymentOrders");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseReturnOrders");

                    b.Navigation("PurchaseReturnTransactions");

                    b.Navigation("PurchaseTransactions");

                    b.Navigation("ReceiptOrders");

                    b.Navigation("ReceiptTransactions");

                    b.Navigation("SalesOrders");

                    b.Navigation("SalesReturnOrders");

                    b.Navigation("SalesReturnTransactions");

                    b.Navigation("SalesTransactions");

                    b.Navigation("Stocks");

                    b.Navigation("SubLedgerBalances");

                    b.Navigation("SubLedgers");

                    b.Navigation("UserBranch");
                });

            modelBuilder.Entity("FMS.Db.Entity.City", b =>
                {
                    b.Navigation("Parties");
                });

            modelBuilder.Entity("FMS.Db.Entity.DamageOrder", b =>
                {
                    b.Navigation("DamageTransactions");
                });

            modelBuilder.Entity("FMS.Db.Entity.FinancialYear", b =>
                {
                    b.Navigation("BranchFinancialYears");

                    b.Navigation("DamageOrders");

                    b.Navigation("DamageTransactions");

                    b.Navigation("InwardSupplyOrders");

                    b.Navigation("InwardSupplyTransactions");

                    b.Navigation("JournalOrders");

                    b.Navigation("JournalTransactions");

                    b.Navigation("LabourOrders");

                    b.Navigation("LabourRates");

                    b.Navigation("LabourTransactions");

                    b.Navigation("LedgerBalances");

                    b.Navigation("OutwardSupplyOrders");

                    b.Navigation("OutwardSupplyTransactions");

                    b.Navigation("PaymentOrders");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseReturnOrders");

                    b.Navigation("PurchaseReturnTransactions");

                    b.Navigation("PurchaseTransactions");

                    b.Navigation("ReceiptOrders");

                    b.Navigation("ReceiptTransactions");

                    b.Navigation("SalesOrders");

                    b.Navigation("SalesReturnOrders");

                    b.Navigation("SalesReturnTransactions");

                    b.Navigation("SalesTransactions");

                    b.Navigation("Stocks");

                    b.Navigation("SubLedgerBalances");
                });

            modelBuilder.Entity("FMS.Db.Entity.InwardSupplyOrder", b =>
                {
                    b.Navigation("InwardSupplyTransactions");
                });

            modelBuilder.Entity("FMS.Db.Entity.JournalOrder", b =>
                {
                    b.Navigation("JournalTransactions");
                });

            modelBuilder.Entity("FMS.Db.Entity.Labour", b =>
                {
                    b.Navigation("DamageOrders");

                    b.Navigation("LabourOrders");
                });

            modelBuilder.Entity("FMS.Db.Entity.LabourOrder", b =>
                {
                    b.Navigation("LabourTransactions");
                });

            modelBuilder.Entity("FMS.Db.Entity.LabourType", b =>
                {
                    b.Navigation("LabourOrders");

                    b.Navigation("Labours");
                });

            modelBuilder.Entity("FMS.Db.Entity.Ledger", b =>
                {
                    b.Navigation("Journals");

                    b.Navigation("LedgerBalances");

                    b.Navigation("Parties");

                    b.Navigation("Payments");

                    b.Navigation("Receipts");

                    b.Navigation("SubLedgers");
                });

            modelBuilder.Entity("FMS.Db.Entity.LedgerBalance", b =>
                {
                    b.Navigation("SubLedgerBalances");
                });

            modelBuilder.Entity("FMS.Db.Entity.LedgerDev", b =>
                {
                    b.Navigation("Journals");

                    b.Navigation("LedgerBalances");

                    b.Navigation("Parties");

                    b.Navigation("Payments");

                    b.Navigation("Receipts");

                    b.Navigation("SubLedgers");
                });

            modelBuilder.Entity("FMS.Db.Entity.LedgerGroup", b =>
                {
                    b.Navigation("JournalTransactions");

                    b.Navigation("LedgerSubGroups");

                    b.Navigation("LedgerSubGroupsDev");

                    b.Navigation("Ledgers");

                    b.Navigation("LedgersDev");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("ReceiptTransactions");
                });

            modelBuilder.Entity("FMS.Db.Entity.LedgerSubGroup", b =>
                {
                    b.Navigation("Ledgers");
                });

            modelBuilder.Entity("FMS.Db.Entity.LedgerSubGroupDev", b =>
                {
                    b.Navigation("LedgersDev");
                });

            modelBuilder.Entity("FMS.Db.Entity.OutwardSupplyOrder", b =>
                {
                    b.Navigation("OutwardSupplyTransactions");
                });

            modelBuilder.Entity("FMS.Db.Entity.PaymentOrder", b =>
                {
                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("FMS.Db.Entity.Product", b =>
                {
                    b.Navigation("AlternateUnits");

                    b.Navigation("DamageTransactions");

                    b.Navigation("InwardSupplyTransactions");

                    b.Navigation("LabourOrders");

                    b.Navigation("LabourRates");

                    b.Navigation("LabourTransactions");

                    b.Navigation("OutwardSupplyTransactions");

                    b.Navigation("PurchaseReturnTransactions");

                    b.Navigation("PurchaseTransactions");

                    b.Navigation("SalesReturnTransactions");

                    b.Navigation("SalesTransactions");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductGroup", b =>
                {
                    b.Navigation("ProductSubGroups");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductSubGroup", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductType", b =>
                {
                    b.Navigation("DamageOrders");

                    b.Navigation("InwardSupplyOrders");

                    b.Navigation("LabourRates");

                    b.Navigation("OutwardSupplyOrders");

                    b.Navigation("ProductGroups");

                    b.Navigation("Products");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseReturnOrders");
                });

            modelBuilder.Entity("FMS.Db.Entity.ProductionOrder", b =>
                {
                    b.Navigation("ProductionTransactions");
                });

            modelBuilder.Entity("FMS.Db.Entity.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseTransactions");
                });

            modelBuilder.Entity("FMS.Db.Entity.PurchaseReturnOrder", b =>
                {
                    b.Navigation("PurchaseReturnTransactions");
                });

            modelBuilder.Entity("FMS.Db.Entity.ReceiptOrder", b =>
                {
                    b.Navigation("ReceiptTransactions");
                });

            modelBuilder.Entity("FMS.Db.Entity.RegisterToken", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("FMS.Db.Entity.SalesOrder", b =>
                {
                    b.Navigation("SalesTransactions");
                });

            modelBuilder.Entity("FMS.Db.Entity.SalesOrderSetup", b =>
                {
                    b.Navigation("SalesTransactionSetups");
                });

            modelBuilder.Entity("FMS.Db.Entity.SalesReturnOrder", b =>
                {
                    b.Navigation("SalesReturnTransactions");
                });

            modelBuilder.Entity("FMS.Db.Entity.State", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Parties");
                });

            modelBuilder.Entity("FMS.Db.Entity.SubLedger", b =>
                {
                    b.Navigation("JournalTransactions");

                    b.Navigation("Labours");

                    b.Navigation("Parties");

                    b.Navigation("PaymentTransaction");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseReturnOrders");

                    b.Navigation("ReceiptTransactions");

                    b.Navigation("SalesOrders");

                    b.Navigation("SalesReturnOrders");

                    b.Navigation("SubLedgerBalances");
                });

            modelBuilder.Entity("FMS.Db.Entity.Unit", b =>
                {
                    b.Navigation("AlternateUnits");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
